
import Mathlib.Topology.Order.IsLUB
import Mathlib.Topology.Instances.Rat


open Set Filter TopologicalSpace Topology Function
variable {Œ± Œ≥ : Type*}
variable [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderTopology Œ±]

protected theorem Set.Subset.isLUB_congr {Œ± : Type*} [TopologicalSpace Œ±] [Preorder Œ±]
    [ClosedIicTopology Œ±] {s t : Set Œ±} (hst : s ‚äÜ t) (hts : t ‚äÜ closure s) {x : Œ±} :
    IsLUB s x ‚Üî IsLUB t x :=
  isLUB_congr <| (upperBounds_closure (s := s) ‚ñ∏ upperBounds_mono_set hts).antisymm <|
    upperBounds_mono_set hst

protected theorem Set.Subset.isGLB_congr {Œ± : Type*} [TopologicalSpace Œ±] [Preorder Œ±]
    [ClosedIciTopology Œ±] {s t : Set Œ±} (hst : s ‚äÜ t) (hts : t ‚äÜ closure s) {x : Œ±} :
    IsGLB s x ‚Üî IsGLB t x :=
  Set.Subset.isLUB_congr (Œ± := Œ±·µí·µà) hst hts

theorem Dense.isLUB_inter_iff {Œ± : Type*} [TopologicalSpace Œ±] [Preorder Œ±] [ClosedIicTopology Œ±]
    {s t : Set Œ±} (hs : Dense s) (ht : IsOpen t) {x : Œ±} :
    IsLUB (t ‚à© s) x ‚Üî IsLUB t x :=
  Set.Subset.isLUB_congr (by simp) <| hs.open_subset_closure_inter ht

theorem Dense.isGLB_inter_iff {Œ± : Type*} [TopologicalSpace Œ±] [Preorder Œ±] [ClosedIciTopology Œ±]
    {s t : Set Œ±} (hs : Dense s) (ht : IsOpen t) {x : Œ±} :
    IsGLB (t ‚à© s) x ‚Üî IsGLB t x :=
  Dense.isLUB_inter_iff (Œ± := Œ±·µí·µà) hs ht

theorem Dense.exists_seq_strictMono_tendsto' [DenselyOrdered Œ±] [FirstCountableTopology Œ±]
    {s : Set Œ±} (hs : Dense s) {x y : Œ±} (hy : y < x) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n ‚àà (Ioo y x ‚à© s)) ‚àß Tendsto u atTop (ùìù x) := by
  have hnonempty : (Ioo y x ‚à© s).Nonempty := by
    obtain ‚ü®z, hyz, hzx‚ü© := hs.exists_between hy
    exact ‚ü®z, mem_inter hzx hyz‚ü©
  have hx : IsLUB (Ioo y x ‚à© s) x := hs.isLUB_inter_iff isOpen_Ioo |>.mpr <| isLUB_Ioo hy
  obtain ‚ü®u, hu‚ü© := hx.exists_seq_strictMono_tendsto_of_not_mem (by simp) hnonempty
  exact ‚ü®u, hu.1, hu.2.2.symm‚ü©

theorem Dense.exists_seq_strictMono_tendsto [DenselyOrdered Œ±] [NoMinOrder Œ±]
    [FirstCountableTopology Œ±] {s : Set Œ±} (hs : Dense s) (x : Œ±) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n ‚àà (Iio x ‚à© s)) ‚àß Tendsto u atTop (ùìù x) := by
  obtain ‚ü®y, hy‚ü© : ‚àÉ y, y < x := exists_lt x
  obtain ‚ü®u, hu_mono, hu_mem, hux‚ü© := hs.exists_seq_strictMono_tendsto' hy
  have hu_mem' (n) : u n ‚àà Iio x ‚à© s :=
    Set.mem_of_mem_of_subset (hu_mem n) <| inter_subset_inter_left _ Ioo_subset_Iio_self
  exact ‚ü®u, hu_mono, hu_mem', hux‚ü©

theorem Dense.exists_seq_strictAnti_tendsto' [DenselyOrdered Œ±] [FirstCountableTopology Œ±]
    {s : Set Œ±} (hs : Dense s) {x y : Œ±} (hy : x < y) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, u n ‚àà (Ioo x y ‚à© s)) ‚àß Tendsto u atTop (ùìù x) := by
  simpa using hs.exists_seq_strictMono_tendsto' (Œ± := Œ±·µí·µà) (OrderDual.toDual_lt_toDual.2 hy)

theorem Dense.exists_seq_strictAnti_tendsto [DenselyOrdered Œ±] [NoMaxOrder Œ±]
    [FirstCountableTopology Œ±] {s : Set Œ±} (hs : Dense s) (x : Œ±) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, u n ‚àà (Ioi x ‚à© s)) ‚àß Tendsto u atTop (ùìù x) :=
  hs.exists_seq_strictMono_tendsto (Œ± := Œ±·µí·µà) x

lemma StrictMono_coe {f: ‚Ñï ‚Üí ‚Ñö} (h: StrictMono (((‚Üë) : ‚Ñö ‚Üí ‚Ñù) ‚àò f)):
    StrictMono f := by
  refine strictMono_nat_of_lt_succ ?_
  intro n
  obtain h' := h (lt_add_one n: n < n + 1)
  simp at h'
  exact h'

theorem Rat.exists_seq_strictMono_tendsto_real (x : ‚Ñù):
‚àÉ (u : ‚Ñï ‚Üí ‚Ñö), StrictMono u ‚àß (‚àÄ (n : ‚Ñï), u n < x) ‚àß
Filter.Tendsto (fun n ‚Ü¶ (u n: ‚Ñù)) Filter.atTop (nhds x) := by
  obtain ‚ü®u, hu_mono, hu_mem, hux‚ü© := Dense.exists_seq_strictMono_tendsto
    Rat.isDenseEmbedding_coe_real.dense x
  obtain hu_mem' := fun n => (Set.mem_inter_iff _ _ _).mp <| hu_mem n
  let v := fun n => (hu_mem' n).2.choose
  let hv_spec := fun n => (hu_mem' n).2.choose_spec
  have hu_comp: u = ((‚Üë) : ‚Ñö ‚Üí ‚Ñù) ‚àò v := by
    ext n
    simp only [Function.comp_apply]
    rw [hv_spec n]
  rw [hu_comp] at hu_mono
  have hv_mono: StrictMono v := StrictMono_coe hu_mono
  use v
  constructor
  ¬∑ exact hv_mono
  ¬∑ constructor
    ¬∑ intro n
      rw [hv_spec]
      exact (hu_mem' n).1
    ¬∑ conv in fun n ‚Ü¶ _ =>
        ext n
        rw [hv_spec]
      exact hux

theorem Rat.exists_seq_strictAnti_tendsto_real (x : ‚Ñù):
‚àÉ (u : ‚Ñï ‚Üí ‚Ñö), StrictAnti u ‚àß (‚àÄ (n : ‚Ñï), x < u n) ‚àß
Filter.Tendsto (fun n ‚Ü¶ (u n: ‚Ñù)) Filter.atTop (nhds x) := by
  obtain ‚ü®u, hu_mono, hu_mem, hux‚ü© := Rat.exists_seq_strictMono_tendsto_real (-x)
  use fun n ‚Ü¶ -(u n)
  constructor
  ¬∑ exact StrictMono.neg hu_mono
  ¬∑ constructor
    ¬∑ intro n
      simp only [cast_neg]
      exact lt_neg_of_lt_neg (hu_mem n)
    ¬∑ simp only [cast_neg]
      rw [(by simp: x = - - x)]
      exact Filter.Tendsto.comp (tendsto_neg _) hux
